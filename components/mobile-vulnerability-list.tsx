"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import { AlertTriangle, Search, Filter, SortDesc, Clock, Target, Zap, Activity, ChevronRight } from "lucide-react"

interface Vulnerability {
  id: string
  cveId: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  cvssScore: number
  status: "open" | "in-progress" | "resolved"
  affectedAssets: number
  discoveredDate: string
  category: string
}

export default function MobileVulnerabilityList() {
  const [vulnerabilities] = useState<Vulnerability[]>([
    {
      id: "1",
      cveId: "CVE-2024-0001",
      title: "DJI 无人机飞控系统未授权访问漏洞",
      severity: "critical",
      cvssScore: 9.1,
      status: "open",
      affectedAssets: 2,
      discoveredDate: "2024-01-15",
      category: "未授权访问",
    },
    {
      id: "2",
      cveId: "CVE-2024-0002",
      title: "地面控制站弱密码漏洞",
      severity: "high",
      cvssScore: 7.5,
      status: "in-progress",
      affectedAssets: 1,
      discoveredDate: "2024-01-14",
      category: "认证绕过",
    },
    {
      id: "3",
      cveId: "CVE-2024-0003",
      title: "视频流服务器信息泄露",
      severity: "medium",
      cvssScore: 5.3,
      status: "open",
      affectedAssets: 1,
      discoveredDate: "2024-01-13",
      category: "信息泄露",
    },
  ])

  const [searchTerm, setSearchTerm] = useState("")
  const [selectedFilter, setSelectedFilter] = useState("all")

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500 text-white"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-yellow-500 text-white"
      case "low":
        return "bg-blue-500 text-white"
      default:
        return "bg-gray-500 text-white"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return "destructive"
      case "in-progress":
        return "default"
      case "resolved":
        return "secondary"
      default:
        return "secondary"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "open":
        return "待处理"
      case "in-progress":
        return "处理中"
      case "resolved":
        return "已解决"
      default:
        return status
    }
  }

  const filteredVulnerabilities = vulnerabilities.filter((vuln) => {
    const matchesSearch =
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.cveId.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesFilter = selectedFilter === "all" || vuln.severity === selectedFilter
    return matchesSearch && matchesFilter
  })

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Header */}
      <div className="sticky top-0 z-50 bg-white border-b shadow-sm">
        <div className="p-4">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-xl font-bold">安全漏洞</h1>
            <div className="flex gap-2">
              <Sheet>
                <SheetTrigger asChild>
                  <Button variant="outline" size="sm">
                    <Filter className="h-4 w-4" />
                  </Button>
                </SheetTrigger>
                <SheetContent side="bottom" className="h-[300px]">
                  <SheetHeader>
                    <SheetTitle>筛选条件</SheetTitle>
                    <SheetDescription>选择要显示的漏洞类型</SheetDescription>
                  </SheetHeader>
                  <div className="grid grid-cols-2 gap-3 mt-6">
                    <Button
                      variant={selectedFilter === "all" ? "default" : "outline"}
                      onClick={() => setSelectedFilter("all")}
                    >
                      全部
                    </Button>
                    <Button
                      variant={selectedFilter === "critical" ? "default" : "outline"}
                      onClick={() => setSelectedFilter("critical")}
                    >
                      严重
                    </Button>
                    <Button
                      variant={selectedFilter === "high" ? "default" : "outline"}
                      onClick={() => setSelectedFilter("high")}
                    >
                      高危
                    </Button>
                    <Button
                      variant={selectedFilter === "medium" ? "default" : "outline"}
                      onClick={() => setSelectedFilter("medium")}
                    >
                      中危
                    </Button>
                  </div>
                </SheetContent>
              </Sheet>
              <Button variant="outline" size="sm">
                <SortDesc className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Search Bar */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="搜索漏洞..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
      </div>

      {/* Stats Bar */}
      <div className="bg-white border-b p-4">
        <div className="grid grid-cols-4 gap-4 text-center">
          <div>
            <div className="text-lg font-bold text-red-600">
              {vulnerabilities.filter((v) => v.severity === "critical").length}
            </div>
            <div className="text-xs text-gray-600">严重</div>
          </div>
          <div>
            <div className="text-lg font-bold text-orange-600">
              {vulnerabilities.filter((v) => v.severity === "high").length}
            </div>
            <div className="text-xs text-gray-600">高危</div>
          </div>
          <div>
            <div className="text-lg font-bold text-yellow-600">
              {vulnerabilities.filter((v) => v.severity === "medium").length}
            </div>
            <div className="text-xs text-gray-600">中危</div>
          </div>
          <div>
            <div className="text-lg font-bold text-green-600">
              {vulnerabilities.filter((v) => v.status === "resolved").length}
            </div>
            <div className="text-xs text-gray-600">已解决</div>
          </div>
        </div>
      </div>

      {/* Vulnerability List */}
      <ScrollArea className="h-[calc(100vh-200px)]">
        <div className="p-4 space-y-3">
          {filteredVulnerabilities.map((vuln) => (
            <Card key={vuln.id} className="cursor-pointer hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-2">
                      <Badge className={`${getSeverityColor(vuln.severity)} text-xs`}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {vuln.cveId}
                      </Badge>
                      <Badge variant={getStatusColor(vuln.status)} className="text-xs">
                        {getStatusText(vuln.status)}
                      </Badge>
                    </div>
                    <h3 className="font-medium text-sm leading-tight mb-2 line-clamp-2">{vuln.title}</h3>
                    <div className="flex items-center gap-4 text-xs text-gray-500">
                      <span className="flex items-center gap-1">
                        <Target className="h-3 w-3" />
                        {vuln.affectedAssets} 个资产
                      </span>
                      <span className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {vuln.discoveredDate}
                      </span>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-3">
                    <div className="text-right">
                      <div className="text-lg font-bold text-red-600">{vuln.cvssScore}</div>
                      <div className="text-xs text-gray-500">CVSS</div>
                    </div>
                    <ChevronRight className="h-4 w-4 text-gray-400" />
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <Badge variant="outline" className="text-xs">
                    {vuln.category}
                  </Badge>
                  <div className="flex gap-1">
                    <Button size="sm" variant="ghost" className="h-6 px-2">
                      <AlertTriangle className="h-3 w-3" />
                    </Button>
                    <Button size="sm" variant="ghost" className="h-6 px-2">
                      <Activity className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </ScrollArea>

      {/* Floating Action Button */}
      <Button size="lg" className="fixed bottom-4 right-4 rounded-full w-14 h-14 shadow-lg">
        <Zap className="h-6 w-6" />
      </Button>
    </div>
  )
}
