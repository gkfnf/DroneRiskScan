"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Textarea } from "@/components/ui/textarea"
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet"
import {
  Drawer,
  DrawerContent,
  DrawerDescription,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import {
  AlertTriangle,
  CheckCircle,
  Copy,
  Download,
  FileText,
  Server,
  Activity,
  ArrowLeft,
  User,
  Target,
  Wrench,
  Eye,
  AlertCircle,
  ChevronDown,
  ChevronUp,
  Phone,
  MessageSquare,
  Share2,
  Star,
  MoreVertical,
  Zap,
  Wifi,
  Database,
  Settings,
} from "lucide-react"

interface VulnerabilityDetail {
  id: string
  cveId: string
  title: string
  description: string
  severity: "critical" | "high" | "medium" | "low"
  cvssScore: number
  status: "open" | "in-progress" | "resolved" | "false-positive"
  affectedAssets: Array<{
    id: string
    name: string
    type: string
    ip: string
    impact: string
  }>
  remediation: {
    summary: string
    steps: Array<{
      id: number
      title: string
      description: string
      command?: string
      completed: boolean
      estimatedTime: string
    }>
  }
  discoveredDate: string
  assignee?: string
}

export default function MobileVulnerabilityDetail() {
  const [vulnerability] = useState<VulnerabilityDetail>({
    id: "vuln-001",
    cveId: "CVE-2024-0001",
    title: "DJI 无人机飞控系统未授权访问漏洞",
    description: "DJI M300 RTK 飞控系统存在未授权访问漏洞，攻击者可通过网络接口获取敏感的飞行数据和控制权限。",
    severity: "critical",
    cvssScore: 9.1,
    status: "open",
    discoveredDate: "2024-01-15",
    assignee: "张工程师",
    affectedAssets: [
      {
        id: "1",
        name: "DJI M300 RTK #001",
        type: "无人机",
        ip: "192.168.1.100",
        impact: "完全控制权限丢失",
      },
      {
        id: "2",
        name: "DJI M300 RTK #002",
        type: "无人机",
        ip: "192.168.1.101",
        impact: "数据泄露风险",
      },
    ],
    remediation: {
      summary: "立即更新飞控固件至最新版本，启用访问控制，配置防火墙规则限制网络访问。",
      steps: [
        {
          id: 1,
          title: "紧急隔离受影响设备",
          description: "立即断开受影响无人机的网络连接，防止进一步攻击",
          completed: false,
          estimatedTime: "5分钟",
        },
        {
          id: 2,
          title: "下载最新固件",
          description: "从DJI官方网站下载最新的飞控固件版本",
          completed: false,
          estimatedTime: "10分钟",
        },
        {
          id: 3,
          title: "备份当前配置",
          description: "在更新前备份当前的飞控配置和飞行数据",
          command: "dji-assistant --backup --output /backup/config_$(date +%Y%m%d).tar.gz",
          completed: false,
          estimatedTime: "15分钟",
        },
        {
          id: 4,
          title: "更新飞控固件",
          description: "使用DJI Assistant 2更新飞控固件到最新版本",
          completed: true,
          estimatedTime: "30分钟",
        },
        {
          id: 5,
          title: "配置访问控制",
          description: "启用飞控系统的访问控制功能，设置强密码",
          completed: false,
          estimatedTime: "10分钟",
        },
      ],
    },
  })

  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    description: true,
    assets: false,
    remediation: true,
  })
  const [remediationProgress, setRemediationProgress] = useState(20)
  const [notes, setNotes] = useState("")
  const [isOnline, setIsOnline] = useState(true)

  useEffect(() => {
    const handleOnline = () => setIsOnline(true)
    const handleOffline = () => setIsOnline(false)

    window.addEventListener("online", handleOnline)
    window.addEventListener("offline", handleOffline)

    return () => {
      window.removeEventListener("online", handleOnline)
      window.removeEventListener("offline", handleOffline)
    }
  }, [])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-500 text-white"
      case "high":
        return "bg-orange-500 text-white"
      case "medium":
        return "bg-yellow-500 text-white"
      case "low":
        return "bg-blue-500 text-white"
      default:
        return "bg-gray-500 text-white"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "open":
        return "destructive"
      case "in-progress":
        return "default"
      case "resolved":
        return "secondary"
      default:
        return "secondary"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "open":
        return "待处理"
      case "in-progress":
        return "处理中"
      case "resolved":
        return "已解决"
      default:
        return status
    }
  }

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({
      ...prev,
      [section]: !prev[section],
    }))
  }

  const toggleStepCompletion = (stepId: number) => {
    const completedSteps = vulnerability.remediation.steps.filter((step) => step.completed).length
    const progress = (completedSteps / vulnerability.remediation.steps.length) * 100
    setRemediationProgress(progress)
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    // 可以添加 toast 提示
  }

  const getAssetIcon = (type: string) => {
    switch (type) {
      case "无人机":
        return <Zap className="h-4 w-4" />
      case "地面控制站":
        return <Activity className="h-4 w-4" />
      case "服务器":
        return <Server className="h-4 w-4" />
      case "网络设备":
        return <Wifi className="h-4 w-4" />
      default:
        return <Database className="h-4 w-4" />
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile Header */}
      <div className="sticky top-0 z-50 bg-white border-b shadow-sm">
        <div className="flex items-center justify-between p-4">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-5 w-5" />
          </Button>

          <div className="flex-1 mx-3">
            <h1 className="text-lg font-semibold truncate">{vulnerability.cveId}</h1>
            <div className="flex items-center gap-2 mt-1">
              <Badge className={`${getSeverityColor(vulnerability.severity)} text-xs`}>
                {vulnerability.severity.toUpperCase()}
              </Badge>
              <Badge variant={getStatusColor(vulnerability.status)} className="text-xs">
                {getStatusText(vulnerability.status)}
              </Badge>
            </div>
          </div>

          <Drawer>
            <DrawerTrigger asChild>
              <Button variant="ghost" size="sm">
                <MoreVertical className="h-5 w-5" />
              </Button>
            </DrawerTrigger>
            <DrawerContent>
              <DrawerHeader>
                <DrawerTitle>更多操作</DrawerTitle>
                <DrawerDescription>选择要执行的操作</DrawerDescription>
              </DrawerHeader>
              <div className="p-4 space-y-2">
                <Button className="w-full justify-start" variant="ghost">
                  <Share2 className="h-4 w-4 mr-2" />
                  分享漏洞信息
                </Button>
                <Button className="w-full justify-start" variant="ghost">
                  <Download className="h-4 w-4 mr-2" />
                  导出报告
                </Button>
                <Button className="w-full justify-start" variant="ghost">
                  <Star className="h-4 w-4 mr-2" />
                  添加到收藏
                </Button>
                <Button className="w-full justify-start" variant="ghost">
                  <Settings className="h-4 w-4 mr-2" />
                  设置提醒
                </Button>
              </div>
            </DrawerContent>
          </Drawer>
        </div>

        {/* Offline Indicator */}
        {!isOnline && (
          <div className="bg-yellow-100 border-b border-yellow-200 px-4 py-2">
            <div className="flex items-center gap-2 text-yellow-800 text-sm">
              <AlertTriangle className="h-4 w-4" />
              <span>离线模式 - 部分功能受限</span>
            </div>
          </div>
        )}
      </div>

      {/* CVSS Score Banner */}
      <div className="bg-gradient-to-r from-red-500 to-red-600 text-white p-4">
        <div className="flex items-center justify-between">
          <div>
            <div className="text-3xl font-bold">{vulnerability.cvssScore}</div>
            <div className="text-sm opacity-90">CVSS 3.1 评分</div>
          </div>
          <div className="text-right">
            <div className="text-sm opacity-90">发现时间</div>
            <div className="font-medium">{vulnerability.discoveredDate}</div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <ScrollArea className="h-[calc(100vh-200px)]">
        <div className="p-4 space-y-4 pb-24">
          {/* Quick Actions */}
          <div className="grid grid-cols-2 gap-3">
            <Button className="h-12" variant="destructive">
              <AlertCircle className="h-4 w-4 mr-2" />
              紧急处理
            </Button>
            <Button className="h-12 bg-transparent" variant="outline">
              <User className="h-4 w-4 mr-2" />
              分配处理人
            </Button>
          </div>

          {/* Description Section */}
          <Card>
            <Collapsible open={expandedSections.description} onOpenChange={() => toggleSection("description")}>
              <CollapsibleTrigger asChild>
                <CardHeader className="cursor-pointer">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-base">
                      <Eye className="h-4 w-4" />
                      漏洞描述
                    </CardTitle>
                    {expandedSections.description ? (
                      <ChevronUp className="h-4 w-4" />
                    ) : (
                      <ChevronDown className="h-4 w-4" />
                    )}
                  </div>
                </CardHeader>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <CardContent className="pt-0">
                  <h3 className="font-medium mb-2">{vulnerability.title}</h3>
                  <p className="text-sm text-gray-600 leading-relaxed">{vulnerability.description}</p>
                </CardContent>
              </CollapsibleContent>
            </Collapsible>
          </Card>

          {/* Affected Assets */}
          <Card>
            <Collapsible open={expandedSections.assets} onOpenChange={() => toggleSection("assets")}>
              <CollapsibleTrigger asChild>
                <CardHeader className="cursor-pointer">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-base">
                      <Target className="h-4 w-4" />
                      受影响资产 ({vulnerability.affectedAssets.length})
                    </CardTitle>
                    {expandedSections.assets ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                  </div>
                </CardHeader>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <CardContent className="pt-0 space-y-3">
                  {vulnerability.affectedAssets.map((asset) => (
                    <div key={asset.id} className="border rounded-lg p-3">
                      <div className="flex items-start gap-3">
                        {getAssetIcon(asset.type)}
                        <div className="flex-1 min-w-0">
                          <div className="font-medium text-sm truncate">{asset.name}</div>
                          <div className="text-xs text-gray-500">{asset.ip}</div>
                          <div className="text-xs text-red-600 mt-1">{asset.impact}</div>
                        </div>
                        <Badge variant="outline" className="text-xs">
                          {asset.type}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </CardContent>
              </CollapsibleContent>
            </Collapsible>
          </Card>

          {/* Remediation Steps */}
          <Card>
            <Collapsible open={expandedSections.remediation} onOpenChange={() => toggleSection("remediation")}>
              <CollapsibleTrigger asChild>
                <CardHeader className="cursor-pointer">
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center gap-2 text-base">
                      <Wrench className="h-4 w-4" />
                      修复指导
                    </CardTitle>
                    {expandedSections.remediation ? (
                      <ChevronUp className="h-4 w-4" />
                    ) : (
                      <ChevronDown className="h-4 w-4" />
                    )}
                  </div>
                  <div className="text-sm text-gray-600 mt-1">进度: {Math.round(remediationProgress)}%</div>
                  <Progress value={remediationProgress} className="mt-2" />
                </CardHeader>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <CardContent className="pt-0">
                  <Alert className="mb-4">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription className="text-sm">{vulnerability.remediation.summary}</AlertDescription>
                  </Alert>

                  <div className="space-y-3">
                    {vulnerability.remediation.steps.map((step) => (
                      <div key={step.id} className="border rounded-lg p-3">
                        <div className="flex items-start gap-3">
                          <Button
                            size="sm"
                            variant={step.completed ? "default" : "outline"}
                            onClick={() => toggleStepCompletion(step.id)}
                            className="mt-1 min-w-[40px] h-8"
                          >
                            {step.completed ? (
                              <CheckCircle className="h-4 w-4" />
                            ) : (
                              <span className="text-xs">{step.id}</span>
                            )}
                          </Button>
                          <div className="flex-1 min-w-0">
                            <div
                              className={`font-medium text-sm mb-1 ${step.completed ? "line-through text-gray-500" : ""}`}
                            >
                              {step.title}
                            </div>
                            <p className={`text-xs text-gray-600 mb-2 ${step.completed ? "line-through" : ""}`}>
                              {step.description}
                            </p>
                            <div className="flex items-center justify-between">
                              <Badge variant="outline" className="text-xs">
                                {step.estimatedTime}
                              </Badge>
                              {step.command && (
                                <Button
                                  size="sm"
                                  variant="ghost"
                                  onClick={() => copyToClipboard(step.command!)}
                                  className="h-6 px-2"
                                >
                                  <Copy className="h-3 w-3" />
                                </Button>
                              )}
                            </div>
                            {step.command && (
                              <div className="bg-gray-100 p-2 rounded text-xs font-mono mt-2 overflow-x-auto">
                                {step.command}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </CollapsibleContent>
            </Collapsible>
          </Card>

          {/* Notes Section */}
          <Card>
            <CardHeader>
              <CardTitle className="text-base">处理备注</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="添加处理备注..."
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                className="min-h-[80px] text-sm"
              />
              <Button className="w-full mt-3" size="sm">
                保存备注
              </Button>
            </CardContent>
          </Card>
        </div>
      </ScrollArea>

      {/* Bottom Action Bar */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t shadow-lg">
        <div className="grid grid-cols-4 gap-1 p-2">
          <Button variant="ghost" className="flex-col h-16 text-xs">
            <MessageSquare className="h-5 w-5 mb-1" />
            评论
          </Button>
          <Button variant="ghost" className="flex-col h-16 text-xs">
            <Phone className="h-5 w-5 mb-1" />
            联系
          </Button>
          <Button variant="ghost" className="flex-col h-16 text-xs">
            <FileText className="h-5 w-5 mb-1" />
            报告
          </Button>
          <Button className="flex-col h-16 text-xs bg-green-600 hover:bg-green-700">
            <CheckCircle className="h-5 w-5 mb-1" />
            完成
          </Button>
        </div>
      </div>

      {/* Floating Action Button for Quick Actions */}
      <Sheet>
        <SheetTrigger asChild>
          <Button
            size="lg"
            className="fixed bottom-20 right-4 rounded-full w-14 h-14 shadow-lg"
            style={{ zIndex: 1000 }}
          >
            <Zap className="h-6 w-6" />
          </Button>
        </SheetTrigger>
        <SheetContent side="bottom" className="h-[400px]">
          <SheetHeader>
            <SheetTitle>快速操作</SheetTitle>
            <SheetDescription>选择要执行的快速操作</SheetDescription>
          </SheetHeader>
          <div className="grid grid-cols-2 gap-4 mt-6">
            <Button className="h-20 flex-col bg-transparent" variant="outline">
              <AlertTriangle className="h-6 w-6 mb-2" />
              <span className="text-sm">紧急隔离</span>
            </Button>
            <Button className="h-20 flex-col bg-transparent" variant="outline">
              <Download className="h-6 w-6 mb-2" />
              <span className="text-sm">下载补丁</span>
            </Button>
            <Button className="h-20 flex-col bg-transparent" variant="outline">
              <User className="h-6 w-6 mb-2" />
              <span className="text-sm">分配专家</span>
            </Button>
            <Button className="h-20 flex-col bg-transparent" variant="outline">
              <Activity className="h-6 w-6 mb-2" />
              <span className="text-sm">开始扫描</span>
            </Button>
          </div>
        </SheetContent>
      </Sheet>
    </div>
  )
}
